<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- ====================================================================== -->
	<!-- P R O J E C T D E S C R I P T I O N -->
	<!-- ====================================================================== -->
	<parent>
		<groupId>org.apache.jackrabbit</groupId>
		<artifactId>oak-parent</artifactId>
		<version>1.14.0</version>
	</parent>
	<artifactId>jcrservice</artifactId>

	<name>Oak Standalone Example</name>
	<description>Standalone application based on Spring Boot then embeds a Jackrabbit Oak content repository</description>

	<properties>
		<skip.deployment>true</skip.deployment>
		<slf4j.version>1.7.21</slf4j.version>
		<slf4j.api.version>1.7.21</slf4j.api.version>
		<spring.boot.version>2.1.5.RELEASE</spring.boot.version>
		<!-- jHipster Build properties -->
		<maven.version>3.3.9</maven.version>
		<java.version>1.8</java.version>
		<node.version>v10.16.1</node.version>
		<npm.version>6.9.2</npm.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<argLine>-Djava.security.egd=file:/dev/./urandom -Xmx256m</argLine>
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>
		<run.addResources>false</run.addResources>
		<!-- These remain empty unless the corresponding profile is active -->
		<profile.swagger />
		<profile.tls />

		<!-- Dependency versions -->
		<jhipster-dependencies.version>3.0.3</jhipster-dependencies.version>
		<!-- The spring-boot version should match the one managed by https://mvnrepository.com/artifact/io.github.jhipster/jhipster-dependencies/${jhipster-dependencies.version} -->
		<spring-boot.version>2.1.6.RELEASE</spring-boot.version>
		<mapstruct.version>1.3.0.Final</mapstruct.version>
		<!-- Plugin versions -->
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-javadoc-plugin.version>3.1.1</maven-javadoc-plugin.version>
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<!-- We can't go to 3.0.0-M2 as it has a regression. See https://issues.apache.org/jira/browse/MENFORCER-306 -->
		<maven-enforcer-plugin.version>3.0.0-M1</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.0.0-M3</maven-failsafe-plugin.version>
		<maven-idea-plugin.version>2.2.1</maven-idea-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.2.3</maven-war-plugin.version>
		<frontend-maven-plugin.version>1.7.6</frontend-maven-plugin.version>
		<git-commit-id-plugin.version>3.0.0</git-commit-id-plugin.version>
		<jacoco-maven-plugin.version>0.8.4</jacoco-maven-plugin.version>
		<jib-maven-plugin.version>1.4.0</jib-maven-plugin.version>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
		<sonar-maven-plugin.version>3.6.0.1398</sonar-maven-plugin.version>
		<jacoco.reportFolder>${project.build.directory}/jacoco</jacoco.reportFolder>
		<jacoco.utReportFile>${jacoco.reportFolder}/test.exec</jacoco.utReportFile>
		<jacoco.itReportFile>${jacoco.reportFolder}/integrationTest.exec</jacoco.itReportFile>
		<junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>
		<junit.itReportFolder>${project.testresult.directory}/integrationTest</junit.itReportFolder>
		<!-- jhipster-needle-maven-property -->
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.github.jhipster</groupId>
				<artifactId>jhipster-dependencies</artifactId>
				<version>${jhipster-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- jhipster-needle-maven-add-dependency-management -->
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.ow2.asm</groupId>
					<artifactId>asm</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- For colored console logging -->
		<dependency>
			<groupId>org.fusesource.jansi</groupId>
			<artifactId>jansi</artifactId>
			<version>1.11</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-core</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- Required for the persistent cache -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>javax.jcr</groupId>
			<artifactId>jcr</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-parsers</artifactId>
			<version>${tika.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.ow2.asm</groupId>
					<artifactId>asm</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>oak-pojosr</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>jackrabbit-jcr-server</artifactId>
			<version>${jackrabbit.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>jackrabbit-jcr-servlet</artifactId>
			<version>${jackrabbit.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>jackrabbit-jcr-rmi</artifactId>
			<version>${jackrabbit.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>oak-jcr</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>oak-lucene</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jackrabbit</groupId>
			<artifactId>oak-store-composite</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>

		<!-- Required for Felix WebConsole -->
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.http.proxy</artifactId>
			<version>2.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.http.bridge</artifactId>
			<version>2.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.webconsole</artifactId>
			<version>4.2.10</version>
			<classifier>all</classifier>
		</dependency>

		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.webconsole.plugins.scriptconsole</artifactId>
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>2.4.16</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- Lucene jars are embedded in oak-lucene but IDE does not recognize 
			them being in classpath. So they need to be explicitly mentioned here -->
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>${lucene.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-analyzers-common</artifactId>
			<version>${lucene.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queryparser</artifactId>
			<version>${lucene.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queries</artifactId>
			<version>${lucene.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-suggest</artifactId>
			<version>${lucene.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.synectiks</groupId>
			<artifactId>common-libraries</artifactId>
			<version>2.0.0-SNAPSHOT</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.data</groupId>
					<artifactId>spring-data-elasticsearch</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-beanutils</groupId>
					<artifactId>commons-beanutils</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-collections</groupId>
					<artifactId>commons-collections</artifactId>
				</exclusion>
				<exclusion>
					<groupId>cglib</groupId>
					<artifactId>cglib</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- Jhipster dependencies -->
		<!-- Jhipster -->
		<dependency>
			<groupId>io.github.jhipster</groupId>
			<artifactId>jhipster-framework</artifactId>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hppc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-afterburner</artifactId>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
			<!-- parent POM declares this dependency in default (compile) scope -->
			<exclusions>
				<exclusion>
					<groupId>org.ow2.asm</groupId>
					<artifactId>asm</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-bean-validators</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-loader-tools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.zalando</groupId>
			<artifactId>problem-spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Spring Cloud -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cloud-connectors</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-data</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<!-- jhipster-needle-maven-add-dependency -->
	</dependencies>

	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.apache.rat</groupId>
				<artifactId>apache-rat-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>src/main/webapp/WEB-INF/log4j.dtd</exclude>
						<exclude>src/main/webapp/WEB-INF/templates/repository-config.json</exclude>
						<exclude>src/main/resources/config-templates/mongomk-config.json</exclude>
						<exclude>src/main/resources/config-templates/repository-config.json</exclude>
						<exclude>src/main/resources/config-templates/segmentmk-config.json</exclude>
						<exclude>*.sh</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>oak</directory>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<systemPropertyVariables>
						<java.util.logging.config.file>
							src/test/resources/logging.properties
						</java.util.logging.config.file>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<id>failsafe-integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>failsafe-verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Jhipster plugins -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<!-- jhipster-needle-maven-add-annotation-processor -->
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<source>8</source>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-idea-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>${start-class}</mainClass>
					<executable>true</executable>
					<attach>false</attach>
					<classifier>exec</classifier>
					<fork>true</fork>
					<!-- Enable the line below to have remote debugging of your application 
						on port 5005 <jvmArguments>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</jvmArguments> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>${properties-maven-plugin.version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>sonar-project.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- jhipster-needle-maven-add-plugin -->
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>${frontend-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>${jib-maven-plugin.version}</version>
					<configuration>
						<from>
							<image>adoptopenjdk:11-jre-hotspot</image>
						</from>
						<to>
							<image>search:latest</image>
						</to>
						<container>
							<entrypoint>
								<shell>sh</shell>
								<option>-c</option>
								<arg>chmod +x /entrypoint.sh &amp;&amp; sync &amp;&amp;
									/entrypoint.sh</arg>
							</entrypoint>
							<ports>
								<port>8080</port>
							</ports>
							<environment>
								<SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
								<JHIPSTER_SLEEP>0</JHIPSTER_SLEEP>
							</environment>
							<useCurrentTimestamp>true</useCurrentTimestamp>
						</container>
					</configuration>
				</plugin>
				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>${git-commit-id-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<failOnNoGitDirectory>false</failOnNoGitDirectory>
						<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
						<generateGitPropertiesFile>true</generateGitPropertiesFile>
						<includeOnlyProperties>
							<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
							<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
							<includeOnlyProperty>^git.branch$</includeOnlyProperty>
						</includeOnlyProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<destFile>${jacoco.utReportFile}</destFile>
							</configuration>
						</execution>
						<!-- Ensures that the code coverage report for unit tests is created 
							after unit tests have been run -->
						<execution>
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.utReportFile}</dataFile>
								<outputDirectory>${jacoco.reportFolder}</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>pre-integration-tests</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<destFile>${jacoco.itReportFile}</destFile>
							</configuration>
						</execution>
						<!-- Ensures that the code coverage report for integration tests is 
							created after integration tests have been run -->
						<execution>
							<id>post-integration-tests</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.itReportFile}</dataFile>
								<outputDirectory>${jacoco.reportFolder}</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<downloadJavadocs>true</downloadJavadocs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
						<execution>
							<id>enforce-dependencyConvergence</id>
							<configuration>
								<rules>
									<DependencyConvergence />
								</rules>
								<fail>false</fail>
							</configuration>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<rules>
							<requireMavenVersion>
								<message>You are running an older version of Maven. JHipster
									requires at least Maven ${maven.version}</message>
								<version>[${maven.version},)</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<message>You are running an incompatible version of Java.
									JHipster supports JDK 8 to 12.</message>
								<version>[1.8,13)</version>
							</requireJavaVersion>
						</rules>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-idea-plugin</artifactId>
					<version>${maven-idea-plugin.version}</version>
					<configuration>
						<exclude>node_modules</exclude>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
					<executions>
						<execution>
							<id>default-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/classes</outputDirectory>
								<useDefaultDelimiters>false</useDefaultDelimiters>
								<delimiters>
									<delimiter>#</delimiter>
								</delimiters>
								<resources>
									<resource>
										<directory>src/main/resources/</directory>
										<filtering>true</filtering>
										<includes>
											<include>config/*.yml</include>
										</includes>
									</resource>
									<resource>
										<directory>src/main/resources/</directory>
										<filtering>false</filtering>
										<excludes>
											<exclude>config/*.yml</exclude>
										</excludes>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<reportsDirectory>${junit.utReportFolder}</reportsDirectory>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<!-- Due to spring-boot repackage, without adding this property test 
							classes are not found See https://github.com/spring-projects/spring-boot/issues/6254 -->
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<reportsDirectory>${junit.itReportFolder}</reportsDirectory>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntTest*</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>disable-test-jdk6</id>
			<activation>
				<jdk>1.6</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Jhipster plugins -->
		<profile>
			<id>swagger</id>
			<properties>
				<profile.swagger>,swagger</profile.swagger>
			</properties>
		</profile>
		<profile>
			<id>tls</id>
			<properties>
				<profile.tls>,tls</profile.tls>
			</properties>
		</profile>
		<profile>
			<id>webpack</id>
			<activation>
				<file>
					<missing>${basedir}/target/classes/static/app/main.bundle.js</missing>
				</file>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-devtools</artifactId>
					<optional>true</optional>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>install node and npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>${node.version}</nodeVersion>
									<npmVersion>${npm.version}</npmVersion>
								</configuration>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
							</execution>
							<execution>
								<id>webpack build dev</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>generate-resources</phase>
								<configuration>
									<arguments>run webpack:build</arguments>
									<environmentVariables>
										<APP_VERSION>${project.version}</APP_VERSION>
									</environmentVariables>
									<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-devtools</artifactId>
					<optional>true</optional>
				</dependency>
			</dependencies>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>dev${profile.tls}</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/classes/static/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<mainClass>${start-class}</mainClass>
							<executable>true</executable>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>install node and npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>${node.version}</nodeVersion>
									<npmVersion>${npm.version}</npmVersion>
								</configuration>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>install</arguments>
								</configuration>
							</execution>
							<execution>
								<id>webpack build test</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>test</phase>
								<configuration>
									<arguments>run webpack:test</arguments>
									<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
								</configuration>
							</execution>
							<execution>
								<id>webpack build prod</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>generate-resources</phase>
								<configuration>
									<arguments>run webpack:prod</arguments>
									<environmentVariables>
										<APP_VERSION>${project.version}</APP_VERSION>
									</environmentVariables>
									<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>prod${profile.swagger}</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>war</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven-war-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>war</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
						<configuration>
							<warSourceIncludes>WEB-INF/**,META-INF/**</warSourceIncludes>
							<failOnMissingWebXml>false</failOnMissingWebXml>
							<warSourceDirectory>target/classes/static/</warSourceDirectory>
							<webResources>
								<resource>
									<directory>src/main/webapp</directory>
									<includes>
										<include>WEB-INF/**</include>
									</includes>
								</resource>
							</webResources>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- Profile for applying IDE-specific configuration. At the moment it 
				configures MapStruct and Hibernate JPA Metamodel Generator, which you need 
				when working with DTOs and entity filtering. -->
			<id>IDE</id>
			<dependencies>
				<dependency>
					<groupId>org.mapstruct</groupId>
					<artifactId>mapstruct-processor</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<!-- This is automatically activated when working in Eclipse -->
			<id>eclipse</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<dependencies>
				<!-- The following dependency is added due to issue #9175 -->
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
			</dependencies>
			<build>
				<pluginManagement>
					<plugins>
						<!-- This plugin's configuration is used to store Eclipse m2e settings 
							only. It has no influence on the Maven build itself. Remove when the m2e 
							plugin can correctly bind to Maven lifecycle -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>${lifecycle-mapping.version}</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.jacoco</groupId>
												<artifactId>
													jacoco-maven-plugin
												</artifactId>
												<versionRange>
													${jacoco-maven-plugin.version}
												</versionRange>
												<goals>
													<goal>prepare-agent</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.github.eirslett</groupId>
												<artifactId>frontend-maven-plugin</artifactId>
												<versionRange>${frontend-maven-plugin.version}</versionRange>
												<goals>
													<goal>install-node-and-npm</goal>
													<goal>npm</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<!-- jhipster-needle-maven-add-profile -->
	</profiles>

</project>
